Archive-name: Xt-FAQVersion: $Id: FAQ-Xt,v 1.28 93/04/02 12:41:12 ware Exp $		    The X Toolkit Intrinsics F.A.Q			  A monthly postingThis article contains the answers to some Frequently Asked Questions(FAQ) from comp.windows.x about the X Toolkit Intrinsics.  To submitquestions (preferably with an answer) send email to: ware@cis.ohio-state.eduMany FAQs, including this one, are available on the archive sitertfm.mit.edu in the directory pub/usenet/news.answers.  The nameunder which a FAQ is archived appears in the Archive-name line at the top of the article.  This FAQ is archived as Xt-FAQ.All code fragments are public domain.  			       Contents0.  Xt Glossary1.  Software Versions2.  Related FAQ's3.  Why does my application core dump when I use signals/alarms/cthreads?4.  How do I use a different visual than the default?5.  Which visual should an application use?6.  Why do only Shell widgets have a Visual?7.  Which visual, depth and colormap do Shells inherit?8.  I've done all the above and I still get a BadMatch error.  Why?9.  Why doesn't my widget get destroyed when I call XtDestroyWidget()?10. How do I exit but still execute the DestroyCallbacks?11. How do I resize a Shell widget?12. Why can't XtAppAddInput() handle files?13. What good books and magazines are there on Xt?14. What Widgets are available?15. What alternatives to the Intrinsics are there?16. How do I pass a float value to XtSetValues?17. How do I write a resource converter?18. How do I open multiple displays?19. What changed from R3 to R4 to R5?20. Where are the resources loaded from?21. What order are callbacks executed in?22. How do I know if a widget is visible?23. How do I reparent a widget in Xt, i.e. XtReparentWidget()?24. Why use XtMalloc, XtFree, etc?25. How to debug an Xt application?26. Why don't XtAddInput(), XtAddTimeout() and XtAddWorkProc() work?27. What is and how can I implement drag and drop?0.  Xt Glossaryo The Xt Intrinsics implement an object oriented interface to C code  to allow useful graphical components to be created.  Included with  this are classes that provide the base functionality: Object,  RectObj, Core, Composite, Constraint, Shell, OverrideShell, WMShell,  etc.  The terms "Xt" and "Intrinsics" are used interchangeably,  however, they are used very precisely to mean a specific library of the X  window system.  In particular, it does not include the Athena,  Motif, OLIT or any other widget set.  Without further widgets the  Intrinsics are not especially useful.o A widget refers to a user interface abstraction created via Xt.  The  precise use, is any object that is a subclass of the Core class.  It  is used loosely to refer to anything that is a subclass of the  Object class although these are more accurately called windowless  widgets or gadgets.o Xlib is the C interface to the X11 protocol.  It is one layer below  the Xt Intrinsics.  Typically a widget uses relatively few Xlib  functions because Xt provides most such services although an  understanding of Xlib helps with problems.1.  Software VersionsThe following are the latest versions of Xt based software:	Software	Version		Released	Next Expected	X11R4		patch 18			(none)	X11R5		patch 21	12/18/92	??	Athena Widgets	(see X11R5)	Motif		1.2.1		9/92		??	Xtra		2.5		6/15/92		??	Xw		X11R4				(none)	Xcu		X11R5				(none)2.  Related FAQ'sDavid B. Lewis (uunet!craft!faq) maintains the FAQ on X.  Itis posted monthly on comp.windows.x and located on export in contrib/FAQ.Liam R. E. Quin (lee@sq.sq.com) posts an FAQ list on Open Look to comp.windows.x.  Jan Newmarch (jan@pandonia.canberra.edu.au) posts an FAQ list on Motif to comp.windows.x.motif.Peter Ware (ware@cis.ohio-state.edu) posts an FAQ list forcomp.windows.x.intrinsics; it is on export in contrib/FAQ-Xt.3.  Why does my application core dump when I use signals/alarms/cthreads?In brief, Xlib, Xt and most widget sets have no mutual exclusion forcritical sections.  Any interrupt handler is likely to leave one ofthe above libraries in an inconsistent state -- such as all theappropriate flags not yet set, dangling pointers, in the middle of alist traversal, etc.  Note that the ANSI C standard points out thatbehavior of a signal handler is undefined if the signal handler callsany function other than signal() itself, so this is not a problemspecific to Xlib and Xt; the POSIX specification mentions otherfunctions which may be called safely but it may not be assumed thatthese functions are called by Xlib or Xt functions.The only safe way to deal with signals is to set a flag in theinterrupt handler.  This flag later needs to be checked either by awork procedure or a timeout callback.  It is incorrect to add eitherof these in the interrupt handler.  As another note, it is dangerousto add a work procedure that never finishes.  This effectivelypreempts any work procedures previously added and so they will neverbe called.  Another option is to open a pipe, tell the event loopabout the read end using XtAppAddInput() and then the signal handlercan write a byte to the write end of the pipe for each signal.However, this could deadlock your process if the pipe fills up.Why don't the Intrinsics deal with this problem?  Primarily because itis supposed to be a portable layer to any hardware and operatingsystem.   Is that a good enough reason -- I don't think so.        Note: the article in The X Journal 1:4 and the example in O'ReillyVolume 6 are in error.4.  How do I use a different visual than the default?This requires a more complicated answer than it should.  A window hasthree things that are visual specific -- the visual, colormap andborder pixmap.  All widgets have their own Colormap and BorderPixmapresource; only shell widgets have Visual resources (another questionsdeals with why shells have a Visual).  The default value of theseresources is CopyFromParent which does exactly what it says.  In theshell widget CopyFromParent gets evalulated as DefaultVisualOfScreenand DefaultColormapOfScreen.  When any one of the three resources isnot properly set, a BadMatch error occurs when the window iscreated.  They are not properly set because each of the values dependson the visual being used.  How to get this to work?  There are two parts to the answer.  Thefirst is if you want an application to start with a particular visualand the second is if you want a particular shell within an applicationto start with a different visual.  The second is actually easierbecause the basic information you need is available.  The first is alittle harder because you'll need to initialize much of the toolkityourself in order to determine the needed information. * Some sample code to start up an application using something other * than the default visual. * To compile: *	cc -g visual.c -o visual -lXaw -lXmu -lXt -lXext -lX11 -lm * To run: *	./visual -geometry 300x300 -depth 24 -visual StaticColor -fg blue -bg yellow * you need to move the mouse to get the particular visuals colormap * to install.#include <X11/Intrinsic.h>#include <X11/StringDefs.h>#include <X11/Shell.h>typedef struct	Visual	*visual;	int	depth;} OptionsRec;OptionsRec	Options;XtResource resources[] =	{"visual", "Visual", XtRVisual, sizeof (Visual *),	XtOffsetOf (OptionsRec, visual), XtRImmediate, NULL},	{"depth", "Depth", XtRInt, sizeof (int),	XtOffsetOf (OptionsRec, depth), XtRImmediate, NULL},XrmOptionDescRec Desc[] =	{"-visual", "*visual", XrmoptionSepArg, NULL},	{"-depth", "*depth", XrmoptionSepArg, NULL}intmain (argc, argv)	int		argc;	char		**argv;	XtAppContext	app;		/* the application context */	Widget		top;		/* toplevel widget */	Display		*dpy;		/* display */	char		**xargv;	/* saved argument vector */	int		xargc;		/* saved argument count */	Colormap	colormap;	/* created colormap */	XVisualInfo	vinfo;		/* template for find visual */	XVisualInfo	*vinfo_list;	/* returned list of visuals */	int		count;		/* number of matchs (only 1?) */	Arg		args[10];	Cardinal	cnt;	char		*name = "test";	char		*class = "Test";	 * save the command line arguments	xargc = argc;	xargv = (char **) XtMalloc (argc * sizeof (char *));	bcopy ((char *) argv, (char *) xargv, argc * sizeof (char *));	 * The following creates a _dummy_ toplevel widget so we can	 * retrieve the appropriate visual resource.	top = XtAppInitialize (&app, class, Desc, XtNumber (Desc), &argc, argv,			       (String *) NULL, args, cnt);	dpy = XtDisplay (top);	XtGetApplicationResources (top, &Options, resources,				   XtNumber (resources),				   args, cnt);	if (Options.visual && Options.visual != DefaultVisualOfScreen (XtScreen (top)))		XtSetArg (args[cnt], XtNvisual, Options.visual); ++cnt;		 * Now we create an appropriate colormap.  We could		 * use a default colormap based on the class of the		 * visual; we could examine some property on the		 * rootwindow to find the right colormap; we could		 * do all sorts of things...		colormap = XCreateColormap (dpy,					    RootWindowOfScreen (XtScreen (top)),					    Options.visual,					    AllocNone);		XtSetArg (args[cnt], XtNcolormap, colormap); ++cnt;		 * Now find some information about the visual.		vinfo.visualid = XVisualIDFromVisual (Options.visual);		vinfo_list = XGetVisualInfo (dpy, VisualIDMask, &vinfo, &count);		if (vinfo_list && count > 0)			XtSetArg (args[cnt], XtNdepth, vinfo_list[0].depth);			XFree ((XPointer) vinfo_list);	XtDestroyWidget (top);	 * Now create the real toplevel widget.	XtSetArg (args[cnt], XtNargv, xargv); ++cnt;	XtSetArg (args[cnt], XtNargc, xargc); ++cnt;	top = XtAppCreateShell ((char *) NULL, class,				applicationShellWidgetClass,				dpy, args, cnt);	 * Display the application and loop handling all events.	XtRealizeWidget (top);	XtAppMainLoop (app);	return (0);5.  Which visual should an application use?This is a point that can be argued about but one opinion is there isno way for an application to know the appropriate visual -- it has tobe specified by the user.  If you disagree with this then yourapplication probably falls into the category of always using thedefault visual or it is hardware specific and expects some particularvisual such as 24bit TrueColor with an OverlayPlane extension (or somesuch).Why?  No application runs in isolation.  Depending on the way a serverallocates resources I may not always want your application to run inTrueColor mode if it is going to mess up my other applications.  I maybe very upset if it chooses to run in GreyScale instead of PsuedoColoror just monochrome.As an example, on a low end color Sun server there are many differentpossible visuals: monochrome, 256 entry colormap, static gray, staticcolor, and a 3/3/2 TrueColor.  The SGI Iris's offer all the above plus 12 bit TrueColor, 24 bit TrueColor, an Overlay Plane.6.  Why do only Shell widgets have a Visual?This is strictly by convention.  It makes it possible for an arbitrarywidget to know that the visual it uses can be found by looking for theshell widget that is its ancestor and obtaining the visual of thatshell.A widget can have its own visual resource.  If it does, it must haveits own realize method to use the visual when it callsXCreateWindow().  You should also make this a resource that can beobtained with XtGetValues() so other widgets can find it.  Areasonable value is probably XtNvisual.7.  Which visual, depth and colormap do Shells inherit?The default value for these resources are set to CopyFromParent.  Thisis interpreted as the DefaultColormapOfScreen(), DefaultDepthOfScreen()and the default visual of the screen if the widget has no parent -- i.e.it is an applicationShellWidgetClass and the root of your widget tree.If the parent of the widget is not null, then the shell copiescolormap and depth from its parent and uses CopyFromParent as thevisual.8.  I've done all the above and I still get a BadMatch error.  Why?Some resource converters improperly cache references.  This wasespecially true of X11R3 and earlier versions of Motif.9.  Why doesn't my widget get destroyed when I call XtDestroyWidget()?See section 2.8 of the Xt specification.It eventually does get destroyed, just not immediately.  TheIntrinsics destroy a widget in a two-phase process.  First it and allof its children have a flag set that indicate it is being destroyed.It is then put on a list of widgets to be destroyed.  This way anypending X events or further references to that widget can be cleanedup before the memory is actually freed.  The second phase is thenperformed after all callbacks, event handlers, and actions havecompleted, before checking for the next X event.  At this point thelist is traversed and each widget's memory is actually free()'d, amongother things.As some further caveats/trivia, the widgets may be destroyed if theIntrinsics determine that they have no further references to thewidgets on the list.  If so, then the phase 2 destruction occursimmediately.  Also, if nested event loops are used, widgets placed onthe destroy list before entering the inner event loop are notdestroyed until returning to the outer event loop.10. How do I exit but still execute the DestroyCallbacks?The problem is if a simple and entirely reasonable approach to exitingan application is used, such as calling exit() directly, then a widgetmay not have a chance to clean up any external state -- such as opensockets, temporary files, allocated X resources, etc.  (this code forsimplicity reasons assumes only a single toplevel widget):	Widget	ToplevelGet (gw)		Widget		gw;		/* widget to find toplevel */		Widget		top;		for (top = gw; XtParent (top); top = XtParent (top))			/* empty */;		return (top);	void	ExitCallback (gw, closure, call_data)		Widget		gw;		/* widget */		XtPointer	closure;	/* data the app specified */		XtPointer	call_data;	/* widget specific data */		Widget		toplevel;		toplevel = ToplevelGet (gw);		XtUnmapWidget (toplevel);	/* make it disappear quickly */		XtDestroyWidget (toplevel);		exit (0);One can see that the above code exit's immediately after destroyingthe toplevel widget.  The trouble is the phase 2 destruction may neveroccur.  This works for most widgets and most applications but will not workfor those widgets that have any external state.  You might think thatsince it works now it will always work but remember that part of thereason an object oriented approach is used is so one can be ignorantof the implementation details for each widget.  Which means that thewidget may change and someday require that some external state iscleaned up by the Destroy callbacks.One alternative is to modify ExitCallback() to set a global flag andthen test for that flag in a private event loop.  However, privateevent loops are frowned upon because it tends to encourage sloppy, anddifficult to maintain practices.Try the following code instead.	#include <X11/Intrinsic.h>	extern Widget ToplevelGet (	#if NeedFunctionPrototypes		Widget		gw	#endif	extern Boolean ExitWorkProc (	#if NeedFunctionPrototypes		XtPointer	closure	#endif	extern void ExitCallback (	#if NeedFunctionPrototypes		Widget		gw,		XtPointer	closure,		XtPointer	call_data	#endif	Widget	ToplevelGet (gw)	Widget		gw;		/* widget to find toplevel */		Widget		top;		for (top = gw; XtParent (top); top = XtParent (top))			/* empty */;		return (top);	void	ExitCallback (gw, closure, call_data)	Widget		gw;		/* widget */	XtPointer	closure;	/* data the app specified */	XtPointer	call_data;	/* widget specific data */		Widget		toplevel;		toplevel = ToplevelGet (gw);		XtUnmapWidget (toplevel);	/* make it disappear quickly */		XtDestroyWidget (toplevel);		XtAppAddWorkProc (XtWidgetToApplicationContext (gw),				  ExitWorkProc, (XtPointer) NULL);	Boolean	ExitWorkProc (closure)		XtPointer	closure;		exit (0);ExitCallback() adds a work procedure that will get called when theapplication is next idle -- which happens after all the events areprocessed and the destroy callbacks are executed.11. How do I resize a Shell widget?After it is realized, one doesn't resize a Shell widget.  The properthing is to resize the currently managed child of the Shell widgetusing XtSetValues().  The geometry change is then propagated to theShell which asks the window manager which may or may not allow therequest.  However, the Shell must have the resourceXtNallowShellResize set to True otherwise it will not even ask thewindow manager to grant the request and the Shell will not resize.To change the position of a Shell, use XtSetValues() on the Shell, notthe child, and within the limits of the window manager it should be granted.12. Why can't XtAppAddInput() handle files?It does, however Unix semantics for when I/O is ready for a file doesnot fit most peoples' intuitive model.  In Unix terms a filedescriptor is ready for reading whenever the read() call would notblock, ignoring the setting of optional flags that indicate not toblock.  This works as expected for terminals, sockets and pipes.  Fora file the read() will always return but the return indicates an EOF-- i.e. no more data.  The result is the code in the Intrinsics alwayscalls the input handler because it always thinks something is about tobe read.  The culprit is the select() system call or on SYSV basedOS's it is the poll() system call.How to get around this on a Unix system?  The best approach is to useanother process to check for available input on the file.  Use a pipeto connect the application with this other process and pass the filedescriptor from the pipe to XtAppAddInput().  A suitable program onBSD systems is "tail -f filename".It's rumored that select() on some systems is not _completely_reliable.  In particular:	- IBM AIX 3.1: this is one where it would work for a while	  (several thousand times) and then stop until some other	  event woke it up. This seemed to be the result of a race	  condition in the Kernel.  IBM claims to have a fix for this.	- Pyramid, doesn't work at all.	- Ultrix (and possibly others where pipes are implemented as	  sockets), wasn't completely broken, but although the writing	  side wrote in 512 byte blocks the reading side received it	  all broken up as if it was being put into the pipe a byte at	  a time.  You can waste a lot of time by reading small blocks	  (get raound it by detecting the situation and having	  select() ignore the pipe for 10 mseconds - by then it had	  been given the whole block).Note that all the above descriptions used Unix terminology such asread(), file descriptor, pipes, etc.  This is an OS dependent area andmay not be identical on all systems.  However the Intrinsic designersfelt it was a common enough operation that it should be included withpart of the toolkit.  Why they didn't also deal with signals at thispoint I don't know.13. What good books and magazines are there on Xt?I have a favorite that is the definitive reference.  To my perspectiveit offers a reasonable introduction but also goes into the fulldetails of the Intrinsics.  When I started using it I was alreadyfamiliar with Xt and the concepts behind it, so newcomers may or maynot find it useful.  I've always found it accurate and complete, whichmeans its a 1000 pages.Asente, Paul J., and Swick, Ralph R., "X Window System Toolkit, The	Complete Programmer's Guide and Specification", Digital Press,	1990, ISBN 1-55558-051-3, order number EY-E757E-DP; and by	Prentice-Hall, ISBN 0-13-972191-6. Also available through DEC	Direct at 1-800-DIGITAL.The other book I commonly recomend to novices is:Young, Doug. "The X Window System: Applications and Programming with	Xt (Motif Version)," Prentice Hall, 1989 (ISBN 0-13-497074-8).And of course O'Reilly has an entire series of manuals on X and Xt.O'Reilly ordering is 800-998-9938.  In particular, Volume 5 is an Xtreference done in manual page style.  The 3rd edition is extensivelyoverhauled and goes far beyond the MIT manual pages.  I'm finding itvery useful.  In particular, the permutted index and references toother manual pages help a great deal in chasing down relatedinformation.I read two periodicals, "The X Resource" and the "The X Journal".These are the only two dealing specifically with X.  "The X Resource"is published quarterly, by O'Reilly, with one of the issues being theMIT X Consortium Technical Conference Proceedings.  There is noadvertising.  I've found it informative with pretty good depth.  Fororders, call 1-800-998-9938, or email cathyr@ora.com.  For editorialmatters, email adrian@ora.com.  Table of contents are posted atmath.utah.edu in ~ftp/pub/tex/bib in TeX form and on ftp.uu.net in~ftp/published/oreilly/xresource in ASCII form."The X Journal" is a bimonthly trade rag with lots of advertising.The articles are informative and oriented toward a less technicalaudience.  I read it more to see what's going on then with anexpectation of learning a great deal (but remember, I represent afairly small percentage of people).  Also, they have a pretty goodcollection of people on the advisory board and as columnists.  Call14. What Widgets are available?There are three popular widget sets:Athena	- The set provided with X11.  This is sufficient for most	  purposes but is on the ugly side.  Recently, a 3d look is	  available for ftp on export.lcs.mit.edu:/contrib/Xaw3d.tar.Z.Motif	- From OSF available for a license fee and commonly shipped on	  many workstation vendors platforms (almost everyone but	  Sun).  It looks good and works well but personally I think	  it is poorly implemented.OLIT	- The Open Look Intrinsics Toolkit is a set of widgets	  implementing Sun's Open Look specification.  Developed by	  AT&T.  I've never used it so can't comment on its quality.	  I've heard rumours that it is a pain to actually get.In addition the following collection of widgets are also available:Xtra	- a library of widgets for sale from Graphical Software	  Technology (310-328-9338).  It includes bar graph, stacked	  bar graph, line graph, pie chart, xy plot, hypertext, help,	  spreadsheet, and data entry form widgets.  I've never seen	  them so I can't comment.FWF	- The Free Widget Foundation is attempting to collect a set of	  freely available widgets.  Included are a Pixmap editor,	  FileDialog, and a few others.  The current set of widgets	  can be obtained via anonymous ftp from the machine	  a.cs.uiuc.edu (128.174.252.1) in the file pub/fwf.shar.Z.Xcu	- The Cornell University widgets from Gene Dykes.  One of the	  early widget sets released.  Provides a nice appearance for	  buttons and has a mini command language.  Probably not so	  widely used.Xs	- The Sony widget set.  This was around during R3 days but	  seemed to disappear.  It looked like it had promise.Xw	- The HP widgets.  The precursor to Motif.  Originally written	  for R3 there exists diffs to get it to work under R4 & R5.	  Again, a pretty good widget set but has more or less died.	  The precursor to this was the Xray toolkit which was	  originally implemented for X10R4 and apparently provided	  much experience for the designers of Xt.Xo	- A widget set I'm working on.  It's still primitive but you	  can give it a try in archive.cis.ohio-state.edu:pub/Xo/*The following specialized widgets are also available:Tbl	- Implements a tabular layout of widgets.  Supports Motif	  widgets as children.  Part of Wcl.Plots	- The Athena Plotting widgets (not the Athena widgets).	  Contact gnb@bby.oz.au or joe@Athena.MIT.EDU.15. What alternatives to the Intrinsics are there?	Name		Language	Vendor	Xview		C		Sun	OI		C++		ParcPlace	Interviews	C++		Stanford	Tcl/tk		C		sprite.berkeley.eduHowever much I like C and admire the skill in both designing andimplementing the Intrinsics, hopefully some alternative will developin the next 3-5 years that uses an object oriented language.  Keepyour eyes open and expect some change about the same time a languageother than C _starts_ gaining acceptance.16. How do I pass a float value to XtSetValues?First, what is going wrong is the structure for an Arg is (essentially)	typdef struct	    String	name;	    long	value;and the code:	Arg	arg;	XtSetArg (arg, "name", 3.2)expands to	Arg	arg;	arg.name = "name";	arg.value = 3.2;you can see that with normal C type conversions, the arg.valuegets the integer "3" instead of the floating point value "3.2".  Whenthe value is copied into the widget resource, the bit pattern iswildly different than that required for a floating point value.  So,how to get around this?The following macro is from the Athena widgets document and I am nowrecomending it over the previous suggestions.#define XtSetFloatArg(arg, n, d) \    if (sizeof(float) > sizeof(XtArgVal)) { \        XtSetArg(arg, n, &(d)); \    } else { \        XtArgVal *ld = (XtArgVal *)&(d); \        XtSetArg(arg, n, *ld); \17. How do I write a resource converter?Courtesy of Rich Thomson (rthomson@dsd.es.com):The following discussion of resource converters assumes R4 (or R5)Intrinsics.  Resource converters changed between R3 and R4 to allowfor destructors and caching of converted values.There are several main types of resource converters:    string to data type    data type to string    data type to data typei) string to data type    Usually a string to data type converter has a fixed set of strings    that will be converted to data type values.  This is most often    used to map enumerated names to enumerated values:	Name		Value	"True"		1	"False"		0    In this case, the string to data type converter needs to compare    the resource value to the list of fixed strings.  This is most    readily accomplished by the use of the "quark" mechanism of the    resource manager.  The resource value is turned into a quark,    which is a unique representation of the string that fits into a    single word.  Then the resource quark is compared against the    quarks for the fixed strings representing the enumerated values.    If there are many enumerated strings in the converter (or many    converters, each with a small number of enumeration strings), then    a global initialization routine might be used to turn all the    resource strings into quarks.  That way, the first time one of    these converters is used, the strings will be turned into quarks    and held in static variables for use in the next invocation of one    of the converters.ii) data type to string    This type of converter is slightly easier than the string to data    type converters since the use of quarks isn't necessary.  Instead,    the data type value is simply converted to a string value,    probably by the use of sprintf.    Data type to string converters are useful for applications that    wish to convert an internal data type value into a string so that    they can write out a valid resource specification to a file.  This    mechanism can be used to provide a "snapshot" of application state    into a file.  This snapshot can be used to restore the program to    a known state via the usual X resource database mechanisms.    If you are taking the trouble to write a string to data type    converter, it isn't much extra effort to write the data type to    string converter.  Writing both at the same time helps to ensure    that they are consistent.iii) data type to data type    This type of converter is used to convert an existing data type    value to another data type.  For instance, an X pixel value can be    converted to an RGB data type that contains separate fields for    red, green and blue.The type signature for a resource converter is as follows:typedef Boolean (*XtTypeConverter)(Display *, XrmValuePtr, Cardinal *,	XrmValuePtr, XrmValuePtr, XtPointer *);    Display *dpy;    XrmValuePtr args;    Cardinal *num_args;    XrmValuePtr fromVal;    XrmValuePtr toVal;    XtPointer *converter_data;When the converter is invoked, the "fromVal" argument points to the sourceX resource manager value and the "toVal" argument points to thedestination X resource manager value.  The "converter_data" argumentis an opaque pointer to some converter-specific data that is specifiedwhen the converter is registered.  The "args" and "num_args" argumentsallow extra information to be passed to the converter when it isinvoked.  For instance, the Pixel to RGB structure converter discussedabove would need colormap and visual arguments in which to lookup thePixel to obtain the RGB values corresponding to that pixel.Care must be taken with the "toVal" argument.  An XrmValue has thefollowing type definition and specifies a size and location for aconverted value:typedef struct {    unsigned int    size;    caddr_t         addr;} XrmValue, *XrmValuePtr;When the converter is invoked, the address may point to a location ofthe given size for the converted value or the location can be NULL.In the former case, the converter should ensure that the size of thedestination area is large enough to handle the converted value.  Ifthe destination area is not large enough, then the converter shouldset the size to the amount of space needed and return False.  Thecaller can then ensure that enough space is allocated and reinvoke theconverter.  If the size is large enough, then the converter can simplycopy the converted value into the space given and return True.If the location is NULL, then the converter can assign the location tothe address of a static variable containing the converted value andreturn True.When writing a group of converters, this code is often repeated and itbecomes convenient to define a macro:    #define DONE(var, type) \      if (toVal->addr) \	  if (toVal->size < sizeof(type)) \	      toVal->size = sizeof(type); \	      return False; \	  else \	    *((type *) toVal->addr) = var; \      else \	toVal->addr = (caddr_t) &var; \      toVal->size = sizeof(type); \      return True;    #define DONESTR(str) \      if (toVal->addr && toVal->size < sizeof(String)) \	  toVal->size = sizeof(String); \	  return False; \      else \	toVal->addr = (caddr_t) str; \      toVal->size = sizeof(String); \      return True;Inside the converter, it is a good idea to perform a little safetychecking on the "num_args" and "args" arguments to ensure that yourconverter is being called properly.Once you have written your converter, you need to register it with theIntrinsics.  The Intrinsics invokes resource converters when creatingwidgets and fetching their resource values from the resource database.To register a converter with a single application context, useXtAppSetTypeConverter:void XtAppSetTypeConverter(context, from, to, converter, args, num_args,	cache, destructor)    XtAppContext context;    String from;    String to;    XtTypeConverter converter;    XtConvertArgList args;    Cardinal num_args;    XtCacheType cache;    XtDestructor destructor;To register a converter with all application contexts, useXtSetTypeConverter:void XtSetTypeConverter(from, to, converter, args, num_args,	cache, destructor)    String from;    String to;    XtTypeConverter converter;    XtConvertArgList args;    Cardinal num_args;    XtCacheType cache;    XtDestructor destructor;In the R3 Intrinsics, there were the routines XtAppAddConverter andXtAddConverter; these have been superseded by XtAppSetTypeConverterand XtSetTypeConverter.  Whenever possible, the newer routines should beused.When a converter is registered with the Intrinsics, a "cache" argumentspecifies how converted resource values are to be cached:    XtCacheNone		Don't cache any converted values    XtCacheAll		Cache all converted values    XtCacheByDisplay	Cache converted values on a per display basisCaching converted values that require a round-trip to the server is agood idea (for instance string to Pixel conversions).The "destructor" argument is a routine that is invoked then theresource is destroyed, either because its cached reference count hasbeen decremented to zero or because the widget owning the value isbeing destroyed.  XtDestructor has the following type definition:typedef void (*XtDestructor)(XtAppContext, XrmValuePtr, XtPointer,	XrmValuePtr, Cardinal *);    XtAppContext context;    XrmValuePtr to;    XtPointer converter_data;    XrmValuePtr args;    Cardinal *num_args;The destructor is invoked to free any auxiliary storage associatedwith the "to" argument, but does not actually free the storage pointedto by the "to" argument itself (to->addr).  The destructor is passedthe extra arguments that were passed to the converter when theconversion was performed (for instance, colormap and visual argumentsfor the string to Pixel converter since the destructor would need tofree the allocated Pixel from the colormap) as well as the privatedata passed in when the converter was registered.Sample converter code can be found in the following files in the MITR5 distribution:    mit/lib/Xt/Converters.c    contrib/lib/PEXt/Converters.c    contrib/lib/PEXt/Converters.h18. How do I open multiple displays?See "Multi-user Application Software Using Xt", The X Resource, Issue 3,(Summer 1992) by Oliver Jones for a complete coverage of the issuesinvolved.  Most of this answer is based on that article.  In anutshell, one uses XtOpenDisplay() to add each display to a _single_application context and then XtCloseDisplay() to shutdown each displayand remove it from the application context.The real problems occur when trying to close down a display.  This canhappen 3 ways:	1. User selects a "quit" button on one of the displays,	2. User has window manager send a WM_DELETE_WINDOW message,	3. Server disconnect -- possibly from a KillClient message,	   server shutdown/crash, or network failure.I'll assume you can deal gracefully with 1 & 2 since it is _merely_ aproblem of translating a Widget to a display and removing thatdisplay.  If not, then read the Oliver Jones article.The third one is difficult to handle.  The following is based on theOliver Jones article and I include it here because it is a difficultproblem.The difficulty arises because the Xlib design presumed that an I/Oerror is always unrecoverable and so fatal.  This is essentially truefor a single display X based application, but not true for amultiple display program or an application that does things other thandisplay information on an X server.  When an X I/O error occurs theI/O error handler is called and _if_ it returns then an exit()happens.  The only way around this is to use setjmp/longjmp to avoidreturning to the I/O error handler.  The following code fragmentdemonstrates this:#include <setjmp.h>jmp_buf XIOrecover;voidXIOHandler (dpy)	Display		*dpy;	destroyDisplay (dpy);	longjmp (XIOrecover, 1);main ()	if (setjmp (XIOrecover) == 0)		XSetIOErrorHandler (XIOHandler);	XtAppMainLoop (app_context);The destroyDisplay() is something that given a Display pointer can goback to the application specific data and perform any necessarycleanup.  It should also call XtCloseDisplay().For those of you unfamiliar with setjmp/longjmp, when setjmp() isfirst called it returns a 0 and save's enough information in thejmp_buf that a latter execution of longjmp() can return the program tothe same state as if the setjmp() was just executed.  The return valueof this second setjmp() is the value of the second argument tolongjmp().  There are several caveats about using these but for thispurpose it is adequate.Some other problems you might run into are resource converters thatimproperly cache resources.  The most likely symptoms are Xlib errorssuch as BadColor, BadAtom, or BadFont.  There may be problems with thetotal number of displays you can open since typically only a limitednumber of file descriptors are available with 32 being a typicalvalue.  You may also run into authorization problems when trying toconnect to a display.There was much discussion in comp.windows.x about this topic inNovember of 91.  Robert Scheifler posted an article which basicallysaid this is the way it will be and Xlib will not change.19. What changed from R3 to R4 to R5?This addresses only changes in the Intrinsics.  First, the generalchanges for each release are described.  Then a, certainly incomplete,list of new functions added and others that are now deprecated arelisted.  Brevity is a primary goal.Much of the following information is retrieved from Chapter 13 of the MITXt Intrinsics Manual and from O'Reilly Volume 5, 3rd edition.From R3 to R4- Addition of gadgets (windowless widgets)- New resource type converter interface to handle cacheing and  additional  data.- Variable argument list interface.- #define XtSpecificationRelease 4  (added with this release)- WMShellPart, TopLevelShellPart & TransientShellPart changed  incompatibly.- core.initialize, core.set_values added ArgList and count parameters- event handlers had continue_to_dispatch parameter added- core.set_values_almost specification changed.- core.compress_exposure changed to an enumerated data type from Boolean- core.class_inited changed to enumerated data type from Boolean- constraint.get_values_hook added to extension record- core.initialize_hook obsolete as info is passed to core.initialize- shell.root_geometry_manager added to extension record- core.set_values_hook obsolete as info is passed to core.set_values- Calling XtQueryGeometry() must store complete geometry.- Added UnrealizeCallback.- XtTranslateCoords() actually works under R4.From R4 to R5:- Psuedo resource baseTranslation added.- Searching for app-default, and other files, made more flexible- customization resource added.- Per-screen resource database.- Support permanently allocated strings.- Permanetly allocated strings required for several class fields.- The args argument to XtAppInitialize, XtVaAppInitialize,  XtOpenDisplay, XtDisplayInitialize, and XtInitialize were changed  from Cardinal* to int*- Many performance improvements (this is summarized from the article  "Xt Performance Improvements in Release 5" by Gabe Beged-Dov in "The  X Resource", Issue 3):	- XrmStringToQuark() augmented with XrmPermStringToQuark() to	  avoid string copies.  Several fields in the class record are	  indicated as needing permanent strings.	- Using an array of Strings for resources	- Callback lists redesigned to use less memory	- Translation manager redesigned and rewritten so it takes	  less memory, translation tables merges are faster, cache of	  action bindings	- Keycode to Keysyms are cached.	- Better sharing of GC's with modifiable fields	- Window to Widget translation uses less space and faster	- Does not malloc space for widget name since quark is available	- Widget space is allocated to include the constraints	- Over several example programs, about a 26% reduction in	  memory usage.Functions new with R5:XtAllocateGC()		- sharable GC with modifiable fields  XtGetActionList()	- get the action table of a classXtScreenDatabase()	- return resource database for a screenXtSetLanguageProc()	- register language procedure called to set localeFunctions new with R4:XtAppAddActionHook()	- procedure to call before _every_ action.XtAppInitialize()	- lots of initialization work.XtAppReleaseCacheRefs()	- decrement cache reference count for converterXtAppSetFallbackResources() - specify default resourcesXtAppSetTypeConverter()	- register a new style converterXtCallCallbackList()	- directly execute a callback listXtCallConverter	()	- invoke a new style converterXtCallbackReleaseCacheRef() - release a cached resource valueXtCallbackReleaseCacheRefList() - release a list of cached resource valuesXtConvertAndStore()	- find and call a resource converterXtDirectConvert()	- Invoke old-style converterXtDisplayOfObject()	- Return the displayXtDisplayStringConversionWarning() - issue a warning about conversionXtFindFile()		- Find a fileXtGetActionKeysym()	- Retrieve keysym & modifies for this actionXtGetApplicationNameAndClass() - return name and classXtGetConstraintResourceList() - get constraints for a widgetXtGetKeysymTable()	- return keycode-to-keysym mapping tableXtGetMultiClickTime()	- read the multi-click timeXtGetSelectionRequest()	- retrieve the SelectionRequest eventXtGetSelectionValueIncremental() - obtain the selection value incrementallyXtGetSelectionValuesIncremental() - obtain the selection value incrementallyXtInitializeWidgetClass() - initialize a widget class manuallyXtInsertEventHanlder()	- register event handler before/after othersXtInsertRawEventHandler() - register event handler without modify input maskXtIsObject()		- test if subclass of ObjectXtIsRectObj()		- test if subclass of RectObjXtKeysymToKeyCodeList()	- return list of keycodesXtLastTimestampProcessed() - retrieve most recent event timeXtMenuPopdown		- Action for popping down a widgetXtMenuPopup		- Action for popping up a widgetXtOffsetOf		- macro for structure offsetsXtOwnSelectionIncremental() - make selection data availabe incrementallyXtPoupSpringLoaded()	- map a spring-loaded popupXtRegisterGrabAction()	- indicate action procedure needs a passive grabXtRemoveActiohHook()	- remove function called after every actionXtResolvePathname()	- find a fileXtScreenOfObject()	- return screen of object.XtSetMultiClickTime()	- set the multi-click timeXtSetWMColormapWindows() - set WM_COLORMAP_WINDOWS for custom colormapsXtUngrabButton()	- cancel a passive button grabXtUngrabKey()		- cancel a passive key grabXtUngrabKeybard()	- release an active keyboard grabXtUngrabPointer()	- release an active pointer grabXtVa*()			- varags interfaces to a bunch of functionsXtWindowOfObject()	- return Window of nearest widget ancestorDeprecated		Replacement			WhenXtAddActions()		XtAppAddActions()		R3XtAddConverter()	XtAppAddConverter()		R3XtAddInput()		XtAppAddInput ()		R3XtAddTimeout()		XtAppAddTimeout()		R3XtAddWorkProc()		XtAppAddWorkProc()		R3XtConvert()		XtConvertAndStore()		R4XtCreateApplicationShell XtAppCreateShell()		R3XtDestroyGC()		XtReleaseGC()			R3XtError()		XtAppError()			R3XtGetErrorDatabase()	XtAppGetErrorDatabase		R3XtGetErrorDatabaseText() XtAppGetErrorDatabaseText	R3XtGetSelectionTimeout()	XtAppGetSelectionTimeout	R3XtInitialize()		XtAppInitialize()		R3XtMainLoop()		XtAppMainLoop()			R3MenuPopdown(action)	XtMenuPopdown(action)		R4MenuPopup(action)	XtMenuPopup(action)		R4XtNextEvent()		XtAppNextEvent()		R3XtPeekEvent()		XtAppPeekEvent()		R3XtPending()		XtAppPending()			R3XtSetErrorHandler()	XtAppSetErrorHandler()		R3XtSetErrorMsgHandler	XtAppSetErrorMsgHandler()	R3XtSetSelectionTimeout()	XtAppSetSelectionTimeout()	R3XtSetWarningHandler()	XtAppSetWarningHandler()	R3XtSetWarningMsgHandler() XtAppSetWarningMsgHandler()	R3XtWarning()		XtAppWarning()			R3XtWarningMsg()		XtAppWarningMsg()		R320. Where are the resources loaded from?The resources of a widget are filled in from the following places(from highest priority to lowest priority):	1. Args passed at creation time.	2. Command line arguments.	3. User's per host defaults file	4. User's defaults file.	5. User's per application default file.	6. System wide per application default file.Note that 2-6 are read only once on application startup.  The resultof steps 3-6 is a single resource database used for further queries.The per host defaults file contains customizations for allapplications executing on a specific computer.  This file is eitherspecified with the XENVIRONMENT environment variable or if that is notset then the file $HOME/.Xdefaults-<host> is used.The user defaults file is either obtained from the RESOURCE_MANAGERproperty on the root window of the display or if that is not set thenthe file $HOME/.Xdefaults is used.  Typically, the program "xrdb" isused to set the RESOURCE_MANAGER property.  Please note that thisshould be kept relatively small as each client that connects to thedisplay must transfer the property.  A size of around 1-3KByte isreasonable.  Some toolkits may track changes to the RESOURCE_MANAGERbut most do not.A user may have many per application default files containingcustomizations specific to each application.  The intrinsics are quiteflexible on how this file is found.  Read the next part that describesthe various environment variables and how they effect where this fileis found.The system wide per application default files are typically found in/usr/lib/X11/app-defaults.  If such a file is not found then thefallback resources are used.  The intrinsics are quite flexible on howthis file is found.  Read the next part that describes the variousenvironment variables and how they effect where this file is found.[Thanks to Oliver Jones (oj@pictel.com) for the following, 6/92]You can use several environment variables to control how resources areloaded for your Xt-based programs -- XFILESEARCHPATH,XUSERFILESEARCHPATH, and XAPPLRESDIR.  These environment variablescontrol where Xt looks for application-defaults files as anapplication is initializing.  Xt loads at most one app-defaults filefrom the path defined in XFILESEARCHPATH and another from the pathdefined in XUSERFILESEARCHPATH.Set XFILESEARCHPATH if software is installed on your system in such away that app-defaults files appear in several different directoryhierarchies.  Suppose, for example, that you are running Sun's OpenWindows, and you also have some R4 X applications installed in/usr/lib/X11/app-defaults. You could set a value like this forXFILESEARCHPATH, and it would cause Xt to look up app-defaults filesin both /usr/lib/X11 and /usr/openwin/lib (or wherever yourOPENWINHOME is located):	setenv XFILESEARCHPATH /usr/lib/X11/%T/%N:$OPENWINHOME/lib/%T/%NThe value of this environment variable is a colon-separated list ofpathnames.  The pathnames contain replacement characters as follows(see XtResolvePathname()):	%N	The value of the filename parameter, or the		application's class name.	%T	The value of the file "type".  In this case, the		literal string "app-defaults"	%C	customization resource (R5 only)	%S	Suffix.  None for app-defaults.	%L	Language, locale, and codeset (e.g. "ja_JP.EUC")	%l	Language part of %L  (e.g. "ja")	%t	The territory part of the display's language string	%c	The codeset part of the display's language stringLet's take apart the example.  Suppose the application's class name is"Myterm". Also, suppose Open Windows is installed in /usr/openwin.(Notice the example omits locale-specific lookup.)	/usr/lib/X11/%T/%N        means /usr/lib/X11/app-defaults/Myterm	$OPENWINHOME/lib/%T/%N    means /usr/openwin/lib/app-defaults/MytermAs the application initializes, Xt tries to open both of the aboveapp-defaults files, in the order shown.  As soon as it finds one, itreads it and uses it, and stops looking for others.  The effect ofthis path is to search first in /usr/lib/X11, then in /usr/openwin.Let's consider another example. This time, let's setXUSERFILESEARCHPATH so it looks for the file Myterm.ad in the currentworking directory, then for Myterm in the directory ~/app-defaults.	setenv XUSERFILESEARCHPATH ./%N.ad:$HOME/app-defaults/%NThe first path in the list expands to ./Myterm.ad.  The second expandsto $HOME/app-defaults/Myterm.  This is a convenient setting fordebugging because it follows the Imake convention of naming theapp-defaults file Myterm.ad in the application's source directory, soyou can run the application from the directory in which you areworking and still have the resources loaded properly.NOTE: when looking for app-default files with XUSERFILESEARCHPATH,      for some  bizarre reason, neither the type nor file suffix is      defined so %T and %S are useless.With R5, there's another twist.  You may specify a customizationresource value.  For example, you might run the "myterm" applicationlike this:	myterm -xrm "*customization: -color"If one of your pathname specifications had the value"/usr/lib/X11/app-defaults/%N%C" then the expanded pathname would be"/usr/lib/X11/app-defaults/Myterm-color" because the %C substitutioncharacter takes on the value of the customization resource.The default XFILESEARCHPATH, compiled into Xt, is:		/usr/lib/X11/%L/%T/%N%C:\  (R5)		/usr/lib/X11/%l/%T/%N%C:\  (R5)		/usr/lib/X11/%T/%N%C:\     (R5)		/usr/lib/X11/%L/%T/%N:\		/usr/lib/X11/%l/%T/%N:\		/usr/lib/X11/%T/%N(Note: some sites replace /usr/lib/X11 with a ProjectRoot in thisbatch of default settings.)The default XUSERFILESEARCHPATH, also compiled into Xt, is 		<root>/%L/%N%C:\  (R5)		<root>/%l/%N%C:\  (R5)		<root>/%N%C:\     (R5)		<root>/%L/%N:\		<root>/%l/%N:\		<root>/%N:<root> is either the value of XAPPLRESDIR or the user's home directoryif XAPPLRESDIR is not set.  If you set XUSERFILESEARCHPATH to somevalue other than the default, Xt ignores XAPPLRESDIR altogether.Notice that the quick and dirty way of making your application findyour app-defaults file in your current working directory is to setXAPPLRESDIR to ".", a single dot.  In R3, all this machinery workeddifferently; for R3 compatibilty, many people set their XAPPLRESDIRvalue to "./", a dot followed by a slash.21. What order are callbacks executed in?(Courtesy of Donna Converse, converse@expo.lcs.mit.edu; 5/10/92)The Intrinsics library do not guarantee an order.  This is becauseboth the widget writer and the application writer have the ability tomodify the entire contents of the callback list.  Neither onecurrently knows what the other is doing and so the Intrinsics cannotguarantee the order of execution.The application programmer cannot rely on the widget writer; thewidget writer is not required to document when the widget will add andremove callbacks from the list or what effect this will have;therefore the functionality contained in a callback should beindependent of the functionality contained in other callbacks on thelist.Even though the Xt standard in the definition of XtAddCallbacksays: 	"callback_name: Specifies the callback list to which the 	procedure is to be appended."you may not infer from the word "appended" that the callback routinesare called in the same order as they have been added to the callbacklist.22. How do I know if a widget is visible?(Courtesy of Donna Converse, converse@expo.lcs.mit.edu; 5/14/92)> I am building a widget needs to know if it is visible. I set the visible> interest field in Core and if my window is completely obscured, the Core> visible flag goes FALSE. However, if my window is iconified, the flag> stays set to TRUE.Right, everything is implemented correctly.  This demonstrates a "deficiency"in the X protocol, and the Core widget is reflecting the capabilities of theprotocol.  (The "deficiency" is that the information is available in one way,in this case an inconvenient way.)  The Xt specification is accurate, inthe second and third paragraphs of section 7.10.2, so read this sectioncarefully.  The visible field will not change in response to iconification.A VisibilityNotify event will not be received when the window goes fromviewable to unviewable, that is, when the widget or an ancestor is unmapped;that is, when iconification occurs.  This is the protocol deficiency.Visibility state and viewable state have specific meanings in the X protocol;see the glossary in your Xlib and X protocol reference manual.> Is this a problem with "mwm" or is there something> else which needs to be done?You'll see this with any window manager, with no window manager.> If the problem is "mwm", what is the fastest> way to determine if a window is iconified? As an application writer, keep track with a global Boolean in an actionroutine with translations for MapNotify and UnmapNotify on the Shell widgetwhich contains your custom widget.  As the custom widget writer, see themap_state field returned by a call to XGetWindowAttributes.  These aresuggestions.23. How do I reparent a widget in Xt, i.e. XtReparentWidget()?You can't.24. Why use XtMalloc, XtFree, etc?Unfortunately, most code that calls malloc(), realloc() or calloc()tends to ignore the possibility of returning NULL.  At best it ishandled something like:	ptr = (type *) malloc (sizeof (type))	if (!ptr)		perror ("malloc in xyzzy()");		exit (1)To handle this common case the Intrinsics define the functionsXtMalloc(), XtCalloc(), XtNew(), XtNewString() and XtRealloc() whichall use the standard C language functions malloc(), calloc() andrealloc() but execute XtErrorMsg() if a NULL value is returned.  Xterror handlers are not supposed to return so this effectively exits.In addition, if XtRealloc() is called with a NULL pointer, it usesXtMalloc() to get the initial space.  This allows code like:	if (!ptr)		ptr = (type *) malloc (sizeof (type));	else		ptr = (type *) realloc (ptr, sizeof (type) * (count + 1));	++count;to be written as:	ptr = XtRealloc (ptr, sizeof (ptr) * ++count);Also, XtFree() accepts a NULL pointer as an argument.  Generally, I'vefound the Xt functions conveniant to use.  However, anytime I'mallocating anything potentially large I use the standard functions soI can fully recover from not enough memory errors.XtNew() and XtNewString() are conveniant macros for allocating astructure or copying a string:	  struct abc *xyzzy;	  char	     *ptr;	  char	     *str = "abcdef";	  xyzzy = XtNew (struct abc);	/* takes care of type casting */	  ptr = XtNewString (str);A strict interpretation of the Intrinsics reference manual allow animplementation to provide functions that are not exchangable withmalloc() and free().  I.e. code such as:	 char	      *ptr;	 ptr = XtMalloc (100);	 free (ptr);may not work.  Personally, I'd call any implementation that did thisbroken and complain to the vendor.A common error for Motif programmers is to use XtFree() on a stringwhen they should really be using XmStringFree().25. How to debug an Xt application?First, I'd recomend getting "purify" from Pure Software.  This is agreat package for tracing memory problems on Sun's.  It's a bit priceyat $2750 but I'd still recomend it.  Excuse the marketing blurb(contact support@pure.com for more info).	Purify inserts additional checking instructions directly into	the object code produced by existing compilers.  These	instructions check every memory read and write performed by	the program under test and detect several types of access	errors, such as reading unitialized memory, writing past	malloc'd bounds, or writing to freed memory.  Purify inserts	checking logic into all of the code in a program, including	third party and vendor object-code libraries, and verifies	system call interfaces.  In addition, Purify tracks memory	usage and identifies individual memory leaks using a novel	adaption of garbage collection techniques.  Purify's nearly	comprehensive memory access checking slows the target program	down typically by a factor of two to five.An alternative package that isn't as pricey ($395 for a Sun), runs onmany Unix's and has pretty similar features is "The SENTINEL DebuggingEnvironment".  This replaces malloc() and several other C libraryfunctions to add additional checks.  (contact cpcahil@virtech.vti.comfor more info)Next, if you are getting any sort of Xlib error, you'll need to run insynchronous mode, easily accomplished with the "-sync" command lineargument or by setting the variable Xdebug to 1 with your debugger.  Thenset a break point in exit().  This will let you trace back to theoriginal Xlib function being called.  If you don't run in synchronousmode, then the actual error may have occured any number of calls toXlib previously since the Xlib calls are buffered and replies from theserver are asynchronous.Next, if you are having trouble with window layout, you can use theundocumented resource "xtIdentifyWindows" or the class resource"XtDebug" to cause the widget name to be identified with each window.For example:    example% xload -xrm '*XtDebug:true' &    example% xwininfo -tree	     <click in new xload window>will give the normal information but the widget name and class of eachwindow is included.  This can help for checking the location and sizeof errant widgets.Next, if you are having trouble with geometry managers or you want totest the way a widget manages it's children, you can tryexport.lcs.mit.edu:contrib/libXtGeo.tar.Z.  This acts as a filterbetween any children and a geometry manager and checks the behaviourof both.  It's a very clever idea.The most unfortunate problem is debugging a callback while theapplication is executing a grab of the keyboard or mouse (such as froma pulldown menu).  The server effectively locks up and you'll need togo to another machine and kill the debugger manually.  The serverlocks up because the application being debugged has said no one elsecan have access to the keyboard but the application is not stoppedwaiting because the debugger is waiting for your commands.Unfortunately you can't give them because all the input is going toyour application which is stopped.The best way to debug this kind of problem is with two machines onyour desk, running the program under a debugger (or other environment)on one machine, and running the application on the other, possiblyusing a command sequence like this:	othermachine% xhost +thismachine	thismachine% setenv DISPLAY othermachine:0;	thismachine% gdb application	# Your favorite debugger.	or this:	othermachine% xhost +thismachine	thismachine% gdb application	(gdb) set environment DISPLAY othermachine:0	(gdb) run ...I believe CodeCenter, a C interpreter/graphical debugger has a methodof dealing with this by explicitely calling the Xlib functions torelease any grabs during breakpoints.Debugging widget problems requires pretty good debugging skills andknowledge of how widgets work.  You can go a long way without knowingthe internals of a particular widget but not very far withoutunderstanding how a widget works.  Judicious use of conditionalbreakpoints and adding print statements with the debugger help a greatdeal.26. Why don't XtAddInput(), XtAddTimeout() and XtAddWorkProc() work?   I have got a delicate problem with the three routines XtAddInput,   XtAddTimeOut and XtAddWorkProc. The problem I have is that when   I use them in my application they seem not to be registred properly.   I have made a handy little testprogram where everything works   perfect, but in my "real" application nothing happens. The introduction in R3 of the XtApp*() functions obsoleted thoseroutines (see Q19 for other changes in R3, R4, and R5).  What happens isthey use a default application context different then the one you mayhave created.  Since events and timeouts are distributed on a perapplication context basis and you are using two application contexts,you won't get those events.For example:	toplevel = XtAppInitialize(&app, class,				   Desc, XtNumber (Desc),				   &argc, argv,				   Fallback, args, cnt);	XtAddTimeOut (...)	XtAddWorkProc (...)	XtAppMainLoop (app)would never invoke the timeout.27. What is and how can I implement drag and drop?(Courtesy of Roger Reynolds, rogerr@netcom.com; 19 Feb 93)Drag-n-drop is a buzzword for moving data between clients, in an``intuitive'' fashion.Motif Version 1.2 supports drag-n-drop capabilities, OpenLook hassupported d-n-d all along.  The two protocols are not compatable witheach other, and so far as I know, they are not published.I wrote a package called RDD which is designed to be a flexible publicprotocol for doing drag 'n drop operations between clients.  Myintention was to provide a tool which would make it easy for people tosupport a "standard" drag-n-drop protocol in the programs they developand contribute or sell, regardless of what widget set is used (as longas it is based on Xt).The implementation is based upon my understanding of the ICCCMconventions, for more details read the code.I have heard from dozens of people using RDD who like it and feel thatit works a whole lot better than Motif 1.2 stuff.  Also, there seem tobe many who think that it is neat but are constrained to use Motifanyway.The latest RDD (and some other stuff) is available for ftp fromnetcom.com, in /pub/rogerr.  A (possibly older) version is alsoavailable on export.lcs.mit.edu in /contrib.Pete Ware					ware@cis.ohio-state.eduCIS Dept, Ohio State University			w/ (614) 292-7318228 Bolz Hall, 2036 Neil Ave.			h/ (614) 538-0965Columbus, OH 43210