We have received a number of requests for a reposting of theInternational Obfuscated C Code Contest rules and guidelines.  Alsosome people requested that these rules be posted to a wider set ofgroups.  Sorry for the cross posting.Some technical clarifications were made to the rules and guidelines(See the diff marks at the right hand edge).  The rules and guidelinesfor this year remain the same, so people who have already or arein the process of submitting entries for the 1993 IOCCC need not worry about these changes.chongo <Landon Curt Noll> /\cc/\        chongo@toad.comLarry Bassel                            lab@sun.com#!/bin/sh# This is a shell archive (shar 3.32)# made 04/05/1993 23:00 UTC by chongo@toad.com# Source directory /tmp# existing files WILL be overwritten# This shar contains:# length  mode       name#   8971 -r--r--r-- rules#  25592 -r--r--r-- guidelines#  34482 -r--r--r-- mkentry.c#   6418 -r--r--r-- obfuscate.info# ============= rules ==============echo "x - extracting rules (Text)"sed 's/^X//' << 'SHAR_EOF' > rules &&X10th International Obfuscated C Code Contest RulesXCopyright (c) Landon Curt Noll & Larry Bassel, 1993.XAll Rights Reserved.  Permission for personal, education or non-profit use isXgranted provided this this copyright and notice are included in its entiretyXand remains unaltered.  All other uses must receive prior permission in writingXfrom both Landon Curt Noll and Larry Bassel.X    Obfuscate:  tr.v.  -cated, -cating, -cates.  1. a.  To render obscure.X		b.  To darken.  2. To confuse:  his emotions obfuscated hisX		judgment.  [LLat. obfuscare, to darken : ob(intensive) +X		Lat. fuscare, to darken < fuscus, dark.] -obfuscation n.X		obfuscatory adj.X    * To write the most Obscure/Obfuscated C program under the rules below.X    * To show the importance of programming style, in an ironic way.X    * To stress C compilers with unusual code.X    * To illustrate some of the subtleties of the C language.X    * To provide a safe forum for poor C code.  :-)XNOTE: Changes from the 1993 draft are noted by change bars.  --->	      |X    To help us with the volume of entries, we ask that you follow these rules:X    1) Your entry must be a complete program.X    2) Your entry must be <= 3217 bytes in length.  The number of charactersX       excluding whitespace (tab, space, newline), and excluding any ; { or }X       followed by either whitespace or end of file, must be <= 1536.X    3) Your entry must be submitted in the following format:X---entry---Xrule:	1993Xfix:	y or n   (n => this is a new entry, y => this replaces an older entry)Xtitle:	title of entry  		    (see comments below)Xentry:	Entry number from 0 to 7 inclusive  (your 1st entry should by 0)Xdate:	Date/time of submission in UTC	    (see comments below)Xhost:	Machine(s) and OS(s) under which your entry was testedX	Use tab indented lines if neededX---remark---X    Place remarks about this entry in this section.  It would be helpful ifX    you were to indent your remarks with 4 spaces, though it is not aX    requirement.  Also, if possible, try to avoid going beyond the 79thX    column.  Blank lines are permitted.X---author---Xname:	your nameXorg:	School/Company/OrganizationXaddr:	postal addressX	use tab indented lines to continueX	don't forget to include the countryXemail:  Email address from a well known site or registered domain.X        If you give several forms, list them on separate tab indented lines.Xanon:	y or n   (y => remain anonymous, n => ok to publish this info)X---info---XIf your program needs an info file, place a uuencoded copy of it inXthis section.  In the case of multiple info files, use multiple infoXsections.  If your entry does not need a info file, skip this section.X---build---XPlace a uuencoded copy of the command(s) used to compile/build your programXin this section.  It must uudecode into a file named 'build'.  The resultingXfile must be 255 bytes or less.X---program---XPlace a uuencoded copy of your program in this section.  It must uudecodeXinto a file named is 'prog.c'.  The resulting file must follow rule #2.X---end---X      Regarding the above format:X	* The title must match the expression: [a-zA-Z0-9_=][a-zA-Z0-9_=+-]*X	  and must be 1 to 12 characters in length.X	  It is suggested, but not required, that the title shouldX	  incorporate your username; in the case of multiple authors,X	  consider using parts of the usernames of the authors.X	* The date in the ---entry--- section should be given with respectX	  to UTC.  The format of the date should be as returned by asctime()X	  using the C locale.  (see guidelines for more info)X	* You may correct/revise a previously submitted entry by sendingX	  it to the contest email address.  Be sure to set 'fix' in theX	  ---entry--- section to 'n'.  The corrected entry must use the sameX	  title and entry number as submittion that is being corrected.  BeX	  sure that you note the resubmittion in the ---remark--- as well.X	* With the exception of the header, all text outside of the aboveX	  format may be ignored by the judges.  If you need tell the judgesX	  something, put it in the ---remark--- section, or send a separateX	  Email message to the judges.X	* Information from the ---author--- section will be published unlessX	  'y' was given to the respective author's 'anon' line.X	* To credit multiple authors, include an ---author--- section forX	  each author.  Each should start with ---author--- line, andX	  should be found between the ---entry--- and ---build--- sections.X	* The entry's remarks should include:X	    - what this program doesX	    - how to run the program (sample args or input)X	    - special compile or execution instructions, if anyX	    - special filename requirements (see rule 4 and 5)X	    - information about any ---data--- filesX	    - why you think the program is obfuscatedX	    - note if this entry is a re-submission of a previous entry.X	    - any other remarks (humorous or otherwise)X	* Do not rot13 your entry's remarks.  You may suggest that certainX	  portions of your remarks be rot13ed if your entry wins an award.X        * Info files should be used only to supplement your entry.  TheyX	  should not be required to exist.X	  If your entry does not need an info file, skip the ---info---X	  section.  If your entry needs multiple info files, use multipleX	  ---info--- sections, one per info file.  You should describeX	  each info file in the ---remark--- section.X    4) If your entry is selected as a winner, it will be modified as follows:X	   'build' is incorporated into a makefile, and 'build' is removedX	   'prog.c' is renamed to your entry's title, followed by an optionalX	       digit, followed by '.c'X	   your entry is compiled into a file with the name of your entry'sX	       title, possibly followed by a digitX       If your entry requires that a build file exist, state so in yourX       entry's remark section.  The makefile will be arranged to execute aX       build shell script containing the 'build' information.  The name ofX       this build shell script will be your entry's title, possibly followedX       by a digit, followed by '.sh'.X       If needed, your entry's remarks should indicate how your entry mustX       be changed in order to deal with the new filenames.X    5) The build file, the source and the resulting executable should beX       treated as read-only files.  If your entry needs to modify these files,X       it should make and modify a copy of the appropriate file.  If thisX       occurs, state so in your entry's remarks.X    6) Entries that cannot be compiled by an ANSI C compiler will be rejected.X       Use of common C (K&R + extensions) is permitted, as long as it does notX       cause compile errors for ANSI C compilers.X    7) The program must be of original work.  All programs must be in theX       public domain.  All copyrighted programs will be rejected.X    8) Entries must be received prior to 07-May-93 0:00 UTC.  (UTC isX       essentially equivalent to Greenwich Mean Time)  Email your entries to:X		...!{apple,pyramid,sun,uunet}!hoptoad!obfuscateX		obfuscate@toad.comX       We request that your message use the subject 'ioccc entry'.X       If possible, we request that you hold off on Emailing your entriesX       until 1-Mar-93 0:00 UTC.  Early entries will be accepted, however.X       We will attempt to email a confirmation to the the first author forX       all entries received after 1-Mar-93 0:00 UTC.X    9) Each person may submit up to 8 entries per contest year.  Each entryX       must be sent in a separate Email letter.X   10) Entries requiring human interaction to be built are not allowed.X       Compiling an entry produce a file (or files) which may be executed.X   11) Programs that require special privileges (setuid, setgid, super-user,X       special owner or group) are not allowed.X    The Judging will be done by Landon Noll and Larry Bassel.  Please sendX    questions or comments about the contest, to:X	...!{apple,pyramid,sun,uunet}!hoptoad!judges	(not the address for  |X	judges@toad.com					 submitting entries)  |X    The rules and the guidelines may (and often do) change from year toX    year.  You should be sure you have the current rules and guidelinesX    prior to submitting entries.  To obtain them, send Email to the address   |X    above and use the subject 'send rules'.				      |X    One may obtain winners of previous contests (1984 to date), via ftp from: |X	host: ftp.uu.net	(192.48.96.9)				      |X	user: anonymousX	pass: yourname@yourhostX	dir:  ~/pub/ioccc						      |X    As a last resort, previous winners may be obtained by sending Email       |X    to the above address.  Please use the subject 'send YEAR winners',        |X    where YEAR is a single 4 digit year, a year range, or 'all'.	      |Xchongo <Landon Curt Noll> /\cc/\  	chongo@toad.com			      |XLarry Bassel			  	lab@sun.com			      |chmod 0444 rules ||echo "restore of rules failed"set `wc -c rules`;Wc_c=$1if test "$Wc_c" != "8971"; then	echo original size 8971, current size $Wc_cfi# ============= guidelines ==============echo "x - extracting guidelines (Text)"sed 's/^X//' << 'SHAR_EOF' > guidelines &&X10th International Obfuscated C Code Contest Guidelines, Hints and CommentsXCopyright (c) Landon Curt Noll & Larry Bassel, 1993.XAll Rights Reserved.  Permission for personal, education or non-profit use isXgranted provided this this copyright and notice are included in its entiretyXand remains unaltered.  All other uses must receive prior permission in writingXfrom both Landon Curt Noll and Larry Bassel.X    This file is intended to help people who wish to submit entries toX    the International Obfuscated C Code Contest (IOCCC for short).X    This is not the IOCCC rules, though it does contain comments aboutX    them.  The guidelines should be viewed as hints and suggestions.X    Entries that violate the guidelines but remain within the rules areX    allowed.  Even so, you are safer if you remain within the guidelines.X    You should read the current IOCCC rules, prior to submitting entries.X    The rules are typically sent out with these guidelines.X    Changes from the 1993 draft are noted by change bars.  --->		      |X    The entry format is better (for us anyway).  The program mkentry.cX    has been updated.  See ENTRY FORMAT.X    We will reject entries that cannot be compiled using an ANSI CX    compiler.  Certain old Obfuscation hacks that cause ANSI C compilersX    fits are no longer permitted.  Some of the new issues deal withX    non-integral array types, variable number of arguments, C preprocessorX    directives and the exit() function.  See OUR LIKES AND DISLIKES.X    You are encouraged to examine the winners of previous contests.  SeeX    FOR MORE INFORMATION for details on how to get previous winners.X    Keep in mind that rules change from year to year, so some winning entriesX    may not be valid entries this year.  What was unique and novel one yearX    might be 'old' the next year.X    An entry is usually examined in a number of ways.  We typically applyX    a number of tests to an entry:X	* look at the original sourceX	* convert ANSI tri-graphs to ASCIIX	* C pre-process the source ignoring '#include' linesX	* C pre-process the source ignoring '#define' and '#include' linesX	* run it through a C beautifierX	* examine the algorithmX	* lint itX	* compile itX	* execute itX    You should consider how your entry looks in each of the above tests.X    You should ask yourself if your entry remains obscure after it has beenX    'cleaned up' by the C pre-processor and a C beautifier.X    Your entry need not do well under all, or in most tests.  In certainX    cases, a test is not important.  Entries that compete for theX    'strangest/most creative source layout' need not do as well asX    others in terms of their algorithm.  On the other hand, givenX    two such entries, we are more inclined to pick the entry thatX    does something interesting when you run it.X    We try to avoid limiting creativity in our rules.  As such, we leaveX    the contest open for creative rule interpretation.  As in real lifeX    programming, interpreting a requirements document or a customer requestX    is important.  For this reason, we often award 'worst abuse of theX    rules' to an entry that illustrates this point in an ironic way.X    If you do plan to abuse the rules, we suggest that you let us knowX    in the remarks section.  Please note that an invitation to abuseX    is not an invitation to break.  We are strict when it comes to theX    3217 byte size limit.  Also, abusing the entry format tends toX    annoy more than amuse.X    We do realize that there are holes in the rules, and invite entriesX    to attempt to exploit them.  We will award 'worst abuse of the rules'X    and then plug the hole next year.  Even so, we will attempt to useX    the smallest plug needed, if not smaller.  :-)X    Check out your program and be sure that it works.  We sometimes makeX    the effort to debug an entry that has a slight problem, particularlyX    in or near the final round.  On the other hand, we have seen someX    of the best entries fall down because they didn't work.X    We tend to look down on a prime number printer, that claims thatX    16 is a prime number.  If you do have a bug, you are better offX    documenting it.  Noting "this entry sometimes prints the 4th powerX    of a prime by mistake" would save the above entry.  And sometimes,X    a strange bug/feature can even help the entry!  Of course, a correctlyX    working entry is best.X    Doing masses of #defines to obscure the source has become 'old'.  WeX    tend to 'see thru' masses of #defines due to our pre-processor testsX    that we apply.  Simply abusing #defines or -Dfoo=bar won't go as farX    as a program that is more well rounded in confusion.X    Many ANSI C compilers dislike the following code, and so do we:X	#define d defineX	#d foo		   <-- don't expect this to turn into #define fooX	int i;X	j;		   <-- don't use such implicit type declarationX	int k;X    We suggest that you compile your entry with an ANSI C compiler.  If youX    must use non-ANSI C, such as K&R C, you must avoid areas that result inX    compile/link errors for ANSI C compilers.X    Unfortunately, some ANSI C compilers require array indexes to be of       |X    integral type.  Thus, the following classical obfuscation hacks should    |X    not be used in 1993.  This rule may be relaxed in future contests.	      |X	int i;X	char *c;X	i[c];		   <--- use c[i] insteadX	(i+3)["string"];   <--- use "string"[i+3] insteadX    If your entry uses functions that have a variable number ofX    arguments, be careful. Systems implement va_list as a wide varietyX    of ways.  Because of this, a number of operations using va_list areX    not portable and must not be used:X	* assigning a non-va_list variable to/from a va_list variableX	* casting a non-va_list variable into/from a va_list variableX	* passing a va_list variable to a function expecting a non-va_list argX	* passing a non-va_list variable to a function expecting a va_list argX	* performing arithmetic on va_list variablesX	* using va_list as a structure or unionX    In particular, do not treat va_list variables as if they were a char **'s.X    Avoid using <varargs.h>, use <stdarg.h> instead.X    If you use C preprocessor directives (#define, #if, #ifdef, ...),X    the leading '#' must be the first character on a line.  While someX    C preprocessors allow whitespace the leading '#', many do not.X    Because the exit() function returns void on some systems, entriesX    must not assume that it returns an int.X    Small programs are best when they are short, obscure and concise.X    While such programs are not as complex as other winners, they doX    serve a useful purpose.  They are often the only program that peopleX    attempt to completely understand.  For this reason, we look forX    programs that are compact, and are instructional.X    One line programs should be short one line programs, say around 80X    bytes long.  Getting close to 160 bytes is a bit too long in our opinion.X    We tend to dislike programs that:X	* are very hardware specificX	* are very OS or Un*x version specificX	     (index/strchr differences are ok, but socket/streams specificX	      code is likely not to be)X	* dump core or have compiler warningsX	     (it is ok only if you warn us in the 'remark' header item)X	* won't compile under both BSD or SYS V Un*xX	* abusing the build file to get around the size limitX	* obfuscate by excessive use of ANSI tri-graphsX	* are longer than they need to beX	* are similar to previous winnersX	* are identical to previous losers  :-)X    Unless you are cramped for space, or unless you are entering theX    'best one liner' category, we suggest that you format your programX    in a more creative way than simply forming excessively long lines.X    The build file should not be used to try and get around the sizeX    limit.  It is one thing to make use of a several -D's to help out,X    but it is quite another to use 200+ bytes of -D's in order toX    try and squeeze the source under the size limit.  You should feelX    free to make use of the build file space, but you are better offX    if you show some amount of restraint.X    We allowed whitespace, and in certain cases ; { or } do not impactX    your program size (up to a certain point), because we want to getX    away from source that is simply a compact blob of characters.X    Given two versions of the same program, one that is a compact blobX    of code, and the other that is formatted more like a typical CX    program, we tend to favor the second version.  Of course, a thirdX    version of the same program that is formatted in an interestingX    and/or obfuscated way, would definitely win over the first two!X    We suggest that you avoid trying for the 'smallest self-replicating'X    program.  We are amazed at the many different sizes that claimX    to be the smallest.  There is nothing wrong with self-replicatingX    programs.  In fact, a number of winners have been self-replicating.X    You might want to avoid the claim of 'smallest', lest we (or others)X    know of a smaller one!X    X client entries should be as portable as possible.  Entries thatX    adapt to a wide collection of environments will be favored.  Don'tX    depend on a particular type of display.  For example, don't dependX    on color or a given size.  Don't require backing store.X    X client entries should avoid using X related libraries andX    software that is not in wide spread use.  We ask that such X clientX    entries restrict themselves to only the low level Xlib and theX    Athena widget set (libX11.a, libXaw.a, libXmu.a and libXt.a).X    Don't use M*tif, Xv*ew, or OpenL*ok toolkits, since not everyoneX    has them.  Avoid depending on a particular window manager.  NotX    everyone has X11r5, and some people are stuck back in X11r4 (orX    earlier), so try to target X11r5 without requiring X11r5.  BetterX    yet, try to make your entry run on all version 11 X Window Systems.X    X client entries should not to depend on particular items onX    .Xdefaults.  If you must do so, be sure to note the required linesX    in the ---remark--- section.X    We like programs that:X	* are as concise and small as they need to beX	* do something at least quasi-interestingX	* pass lint without complaint (not a requirement, but it is nice)X	* are portableX	* are unique or novel in their obfuscation styleX	* make us laugh and/or throw up  :-)X    Some types of programs can't excel in some areas.  Of course, yourX    program doesn't have to excel in all areas, but doing well in severalX    areas really does help.X    We freely admit that interesting, creative or humorous comments inX    the ---remark--- section helps your chance of winning.  If you had toX    read of many twisted entries, you too would enjoy a good laugh or two.X    We think the readers of the contest winners do as well.X    Be creative!X    In order to help us process the many entries, we must request yourX    assistance by formatting your entries in a certain way.  This format,X    in addition, allows us to quickly separate information about theX    author from the program itself.  (see JUDGING PROCESS)X    We have provided the program, mkentry, as an example of how toX    format entries.  You should be aware of the following warning thatX    is found in mkentry.c:X	This program attempts to implement the IOCCC rules.  EveryX	attempt has been made to make sure that this program producesX	an entry that conforms to the contest rules.  In all cases,X	where this program differs from the contest rules, theX	contest rules will be used.  Be sure to check with theX	contest rules before submitting an entry.X    You are not required to use mkentry.  It is convenient, however,X    as it attempts to uuencode the needed files, and attempt to checkX    the entry against the size rules.X    If you have any suggestions, comments, fixes or complaints aboutX    the mkentry.c program, please send Email to the judges.  (see below)X    The following is a sample entry:X---entry---Xrule:	1993Xfix:	nXtitle:	chonglabXentry:	0Xdate:	Mon Mar  1 08:45:20 1993Xhost:	Un*x v6, pdp11/45X---remark---X    This is a non-obfuscated obfuscated C program.X    It is likely not to win a prize.  But what do you expect fromX    a short example!X---author---Xname:	Landon Curt NollXorg:	IOCCC Judging GroupXaddr:	Toad HallX	PO Box 170608X	San Francisco, CaliforniaXemail:	chongo@toad.comXanon:	nX---author---Xname:	Larry BasselXorg:	IOCCC Judging GroupXaddr:	Toad HallX	PO Box 170608X	San Francisco, CaliforniaXemail:	hoptoad!sun!labX	lab@sun.comXanon:	nX---info---Xbegin 444 info.fileXendX---build---Xbegin 444 buildXendX---program---Xbegin 444 prog.cXendX---end---X    Typically the build file should assume that the source is prog.cX    and will compile into prog.  If an entry wins, we will renameX    its source and binary to avoid filename collision.  By tradition,X    we use the name of the entry's title, followed by an optionalX    digit in case of name conflicts.X    If the above entry somehow won the 'least likely to win' award,X    we would use chonglab.c and chonglab.X    If your entry depends on, or requires that your build, sourceX    and/or binary files be a particular name, please say so in theX    ---remark--- section.  If this case applies, it would be be helpfulX    if you did one of the following:X	* Tell us how to change the filename(s) in your entry.X	* Have the build file make copies of the files.  For example:X		cc prog.c -o special_name		need special binaryX	    or  rm -f special_src.c			need special sourceX		cp prog.c special_src.cX		cc special_src.c -o special_nameX	    or  rm -f special_build			need special buildX		tail +4 build > special_buildX		sh < special_buildX	* Assume that we will use the entry title.  Send us a version ofX	  your build/program files that uses the name convention.  YouX	  should uuencode these files in ---data--- sections.X    If your entry needs to modify its source, info or binary files,X    please say so in the ---remark--- section.  You should try to avoidX    touching your original build, source and binary files.  You shouldX    arrange to make copies of the files you intend to modify.  ThisX    will allow people to re-generate your entry from scratch.X    Remember that your entry may be built without a build file.  WeX    typically incorporate the build lines into a Makefile.  If theX    build file must exist, say so in the ---remark--- section.X    If your entry needs special info files, you should uuencode themX    into ---info--- sections.  In the case of multiple info files,X    use multiple ---info--- sections.  If no info files are needed,X    then skip the ---info--- section.X    Info files are intended to be input, or detailed information thatX    does not fit well into the ---remark--- section.  For example, anX    entry that implements a compiler might want to provide some sampleX    programs for the user to compile.  An entry might want to include aX    lengthy design document, that might not be appropriate for aX    'hints' file.X    Info files should be used only to supplement your entry.  ForX    example, info files may provide sample input or detailedX    information about your entry.  Because they are supplemental,X    the entry should not require them exist.X    In some cases, your info files might be renamed to avoid nameX    conflicts.  If info files should not be renamed for some reason,X    say so in the ---remark--- section.X    Info files must uudecode into the current directory.  If theyX    absolutely must be renamed, or moved into a sub-directory, sayX    so in the ---remark--- section.X    When submitting multiple entries, be sure that each entry hasX    a unique entry number from 0 to 7.  Your first entry shouldX    have entry number 0.X    With the exception of the header, all text outside of the entryX    format may be ignored.  That is, don't place text outside of theX    entry and expect the judges to see it.  (Our decoding tools aren'tX    AI progs!) If you need tell the the something, put it in theX    ---remark--- section, or send a Email to the judges at:X	...!{apple,pyramid,sun,uunet}!hoptoad!judges	(not the address forX	judges@toad.com					 submitting entries)X    The date should be given with respect to UTC.  (Some systems referX    to this as GMT or GMT0)  The format of the date should be that asX    returned by asctime() in the C locale.  An example of such a string is:X    This format is similar to the output of the date(1) command.  TheX    string does not include the timezone name before the year.  On manyX    systems, one of the following command will produce a similar string:X	date -u "+%a %h %d %T 19%y"X	date -u | sed -e 's/... \(19[0-9][0-9]\)$/\1/'X	sh -c 'TZ=UTC date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'X	sh -c 'TZ=GMT date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'X	sh -c 'TZ=GMT0 date | sed -e "s/... \(19[0-9][0-9]\)$/\1/"'X    You are allowed to update/fix/revise your entry.  To do so, setX    the 'fix' line in the ---entry--- section to 'y' instead of 'n'.X    Be sure that the resubmittion uses the same title and entry numberX    as well, as these are used to determine which entry is to beX    replaced.X    Entries are judged by Larry Bassel and Landon Curt Noll.X    Entries are unpacked into individual directories.  The Email messageX    is unpacked into individual files, each containing:X	---entry--- sectionX	all ---author--- sectionsX	all ---info--- sectionsX	---build--- sectionX	---program--- sectionX	any other text, including the Email message headersX    Prior to judging, the 'any other text' file is scanned to be sureX    it does not contain useful information (or in case the entry wasX    malformed and did not unpack correctly).  Information from theX    ---author--- sections are not read until the judging process isX    complete, and then only from entries that have won an award.X    The above process helps keep us biased for/against any one particularX    individual.  We are usually kept in the dark as much as you areX    until the final awards are given.  We like the surprise of findingX    out in the end, who won and where they were from.X    We attempt to keep all entries anonymous, unless they win an award.X    Because the main 'prize' of winning is being announced, we make allX    attempts to send non-winners into oblivion.  We remove all non-winningX    files, and shred all related paper.  By tradition, we do not evenX    reveal the number of entries that we received.  (for the curious,X    we do indicate the volume of paper consumed when presenting the IOCCCX    winners at talks)X    After the Usenix announcement, we attempt to send Email to theX    authors of the winning entries.  One reason we do this is to giveX    the authors a chance to comment on the way we have presented theirX    entry.  They are given the chance to correct mistakes, typos.  WeX    often accept their suggestions/comments about our remarks as well.X    This is done prior to posting the winners to the wide world.X    Judging consists of a number of elimination rounds.  During a round,X    the collection of entries are divided into two roughly equal piles;X    the pile that advances on to the next round, and the pile that doesX    not.  We also re-examine the entries that were eliminated in theX    previous round.  Thus, an entry gets at least two readings.X    A reading consists of a number of actions:X	* reading the ---entry--- sectionX	* reading the uudecoded ---build--- sectionX	* reading the uudecoded ---program--- sectionX	* reading the uudecoded ---info--- section(s), if anyX	* passing the source thru the C pre-processorX	    shipping over any #include filesX	* performing a number of C beautify/cleanup edits on the sourceX	* passing the beautified source thru the C pre-processorX	    shipping over any #include filesX    In later rounds, other actions are performed:X	* linting the sourceX	* compiling/building the sourceX	* running the programX	* performing misc tests on the source and binaryX    Until we reduce the stack of entries down to about 25 entries, entriesX    are judged on an individual basis.  An entry is set aside because itX    does not, in our opinion, meet the standard established by the round.X    When the number of entries thins to about 25 entries, we begin to formX    award categories.  Entries begin to compete with each other for awards.X    An entry often will compete in several categories.X    The actual award category list will vary depending on the types of entriesX    we receive.  A typical category list might be:X	* best small one line programX	* best small programX	* strangest/most creative source layoutX	* most useful obfuscated programX	* best game that is obfuscatedX	* most creatively obfuscated programX	* most deceptive C codeX	* best X client (see OUR LIKES AND DISLIKES)X	* best abuse of ANSI CX	* worst abuse of the rulesX	* <anything else so strange that it deserves an award>X    We do not limit ourselves to this list.  For example, a few entries are soX    good/bad that they are declared winners at the start of the final round.X    We will invent awards categories for them, if necessary.X    In the final round process, we perform the difficult tasks ofX    reducing the remaining entries (typically about 25) down to 8 or 10X    winners.  Often we are confident that the entries that make it intoX    the final round are definitely better than the ones that do notX    make it.  The selection of the winners out of the final round, isX    less clear cut.X    Sometimes a final round entry good enough to win, but is beat outX    by a similar, but slightly better entry.  For this reason, it isX    sometimes worthwhile to re-enter an improved version of an entryX    that failed to win in a previous year.  This assumes, of course,X    that the entry is worth improving in the first place!X    More often that not, we select a small entry (usually one line), aX    strange/creative layout entry, and an entry that abuses the contestX    rules in some way.X    In the end, we traditionally pick one entry as 'best'.  Sometimes suchX    an entry simply far exceeds any of the other entry.  More often, theX    'best' is picked because it does well in a number of categories.X    The first announcement, occurs at a Summer Usenix conference.  By tradition,X    this is done during the latter part of the UUNET/IOCCC BOF, just prior toX    the Berkeley BSD, and BSDI BOF.X    Winning entries will be posted in late June to the following groups:X	    comp.lang.c		  comp.unix.wizards	alt.sourcesX    In addition, pointers to these postings are posted to the followingX	    comp.sources.d	  alt.sources.d		misc.miscX	    comp.sources.misc	  comp.windows.xX    Winning entries will be deposited into the uunet archives.  SeeX    below for details.X    Often, winning entries are published in selected magazines.  WinnersX    have appeared in books ("The New Hackers Dictionary") and on T-Shirts.X    Last, but not least, winners receive international fame and flames!  :-)X    You may contact the judges by sending Email to the following address:X	...!{apple,pyramid,sun,uunet}!hoptoad!judges	(not the address forX	judges@toad.com					 submitting entries)X    Questions and comments about the contest are welcome.X    The rules and the guidelines may (and often do) change from year to	      |X    year.  You should be sure you have the current rules and guidelines	      |X    prior to submitting entries.  To obtain them, send Email to the address   |X    above and use the subject 'send rules'.				      |X    One may obtain winners of previous contests (1984 to date), via ftp from: |X	host: ftp.uu.net	(192.48.96.9)				      |X	user: anonymousX	pass: yourname@yourhostX	dir:  ~/pub/ioccc						      |X    As a last resort, previous winners may be obtained by sending Email	      |X    to the above address.  Please use the subject 'send YEAR winners',	      |X    where YEAR is a single 4 digit year, a year range, or 'all'.	      |Xchongo <Landon Curt Noll> /\cc/\  	chongo@toad.com			      |XLarry Bassel			  	lab@sun.com			      |chmod 0444 guidelines ||echo "restore of guidelines failed"set `wc -c guidelines`;Wc_c=$1if test "$Wc_c" != "25592"; then	echo original size 25592, current size $Wc_cfiecho "End of part 1, continue with part 2"exit 0Sunnyvale residents: Vote Landon Noll for Sunnyvale City Council seat 1.